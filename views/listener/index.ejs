<!doctype html>
<html lang="en">
    <head>
        <link href="/css/group9.css" rel="stylesheet" type="text/css">
        <link href="/css/listener.css" rel="stylesheet" type="text/css">
    </head>
    <body>
        <!----- App Title ----->
        <%- include('../partials/title.ejs') %>

        <!----- Navigation ----->
        <div class="navbar">
            <button type="button" onclick="alert('Already logged in!')">Listener</button>                
            <button type="button"> <a href="/producer">Producer</a></button>
            <button type="button"> <a href="/dj">DJ</a></button>
            <button type="button" onclick="logout()"> <a href="/">Logout</a></button>
        </div>

        <div class="listener-body-wrapper">
            <!----- Welcome message ----->
            <h1 id="listener-name" style="margin: 20px;"></h1>
            <button class="change-name">Change Name</button>

            <!----- Beginning of page body (contains boxes: Preferences and Songs) ----->
            <div class="listener-sub-body-wrapper">
                <!----- PREFERENCES (LEFT BOX) ----->
                <div class="listener-preference-body">
                    <!-- Search -->  
                    <h3>Search a Song:</h3>
                    <div class="listener-search">
                        <!-- No name by default -->
                        <form name="song-form" onsubmit="return validateForm(event)">
                            <label>Song:</label>
                            <input id="search-song" name="search-song" type="text" class="search-input">
                            <input id="search" type="submit" value="Search">
                        </form>
                    </div>   
                    <div class="error-message-container">
                        <p id="error-message" class="error-message"></p>
                    </div>
                    <!-- Genre -->            
                    <h3 style="margin-top: 0;">Select your Genre:</h3>
                    <div class="listener-genre">  
                        <!-- All by default -->                       
                        <button class="genre-button1" type="button">Electronic</button>
                        <button class="genre-button2" type="button">Lo-Fi</button>
                        <button class="genre-button3" type="button">Ambient</button>
                        <button class="genre-button4" type="button">Classical</button>
                    </div>
                
                    <!-- DJ -->  
                    <h3> Select your DJ:</h3>
                    <div class="listener-dj">
                        <select id="DJ" name="DJ">
                            <option value="AllDJ">All DJ</option>
                            <% djs.forEach((dj) => { %>
                                <option value="<%= dj.name %>"><%= dj.name %></option>
                            <% }); %>
                        </select>
                    </div>

                    <button type="button" onclick="clearSearch()">Clear</button>  

                </div>

                <!----- DISPLAY SONGS (RIGHT BOX) ----->
                <div class="listener-song-body">
                    <div class="listener-song-checkbox">
                        <h2>Upcoming Songs</h2>
                    </div>

                    <!-- Songs Table -->
                    <div class="table-section">
                        <table id="songs-table">
                            <tr style="background-color: gray">
                                <th style="width: 35%;">DJ</th>
                                <th style="width: 65%;">Songs</th>
                            </tr>
                            <% djs.filter(dj => dj.songs.length > 0).forEach((dj) => { %>
                                <% dj.songs.forEach((songID) => {
                                    const song = songs.find(s => s.songID === songID);
                                    if (song) { %>
                                        <tr class="dj-row dj-<%= dj.name %>">
                                            <td>
                                                <img width="25" height="25" src="https://img.icons8.com/ultraviolet/40/test-account.png" alt="test-account" style="padding-right: 10px;" />
                                                <%= dj.name %>
                                            </td>
                                            <td>
                                                <%= song.title %>
                                            </td>
                                        </tr>
                                    <% }
                                }); %>
                            <% }); %>
                        </table>
                    </div>


                </div>
            </div>
        </div>

        <!----- SCRIPTS ----->
        <script src="/js/login.js"></script>
        <script src="/js/listener.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script>
            // Declare Table Data passed by EJS Template
            var djs = <%- JSON.stringify(djs) %>;
            var songs = <%- JSON.stringify(songs) %>;

            // Connect to the Socket.io server
            const socket = io();

            // Listen for the update event from the server
            socket.on('databaseUpdate', async () => {
                // Reload data from the server when the update event is received
                try {
                    console.log("Client has detected a change! Attempting to update...");
                    const response1 = await axios.get('http://localhost:3000/api/djs');
                    const djs_data = response1.data;
                    const response2 = await axios.get('http://localhost:3000/api/songs');
                    const songs_data = response2.data;

                    // Update the table with the new data
                    updateTableData(djs_data, songs_data);
                } catch (error) {
                    console.error('Error reloading data:', error);
                }
            });

            const buttons = document.querySelectorAll("[class^='genre-button']");
            // Event Listener: change preference according to button color and index,
            // then update table accordingly
            buttons.forEach(function(button, index) {
                button.addEventListener("click", function() {
                    const preferences = JSON.parse(localStorage.getItem("preferences"));
            
                    // Turn off genre preference, button switches to black
                    if (button.style.backgroundColor === "grey") {
                        button.style.backgroundColor = "#1a1a1a";
            
                        // Update the genre preference to false
                        switch (index) {
                            case 0:
                                preferences.genre.electronic = false;
                                break;
                            case 1:
                                preferences.genre.lofi = false;
                                break;
                            case 2:
                                preferences.genre.ambient = false;
                                break;
                            case 3:
                                preferences.genre.classical = false;
                                break;
                            default:
                                break;
                        }
                    } else { // Turn on genre preference, button switches to grey
                        button.style.backgroundColor = "grey";
            
                        // Update the genre preference to true
                        switch (index) {
                            case 0:
                                preferences.genre.electronic = true;
                                break;
                            case 1:
                                preferences.genre.lofi = true;
                                break;
                            case 2:
                                preferences.genre.ambient = true;
                                break;
                            case 3:
                                preferences.genre.classical = true;
                                break;
                            default:
                                break;
                        }
                    }

                    // redundant conditional (fix)
                    if (preferences.genre.electronic || preferences.genre.lofi || preferences.genre.ambient || preferences.genre.classical) {
                        filterByGenre(djs, songs, preferences.genre);
                    } else {
                        // Restore full table with original data
                        updateTableData(djs, songs);
                    }
                    filterByDJ(preferences.DJ);
            
                    localStorage.setItem("preferences", JSON.stringify(preferences));
                    console.log("Selected Genre Preferences: ", preferences.genre);
                });
            });

            // Clear preferences and update table
            function clearSearch() {
                document.getElementById("search-song"). value = "";
                const errorMessage = document.getElementById("error-message");
                errorMessage.textContent = "";
                
                // Clear Preferences
                const preferences = JSON.parse(localStorage.getItem("preferences"));
                Object.keys(preferences.genre).forEach( (genre) => {
                    preferences.genre[genre] = false;
                });
                buttons.forEach( (button) => {
                    button.style.backgroundColor = "#1a1a1a";
                });
                preferences.DJ = "AllDJ";
                djSelector.selectedIndex =

                localStorage.setItem("preferences", JSON.stringify(preferences));

                // Restore Table
                updateTableData(djs, songs);

                console.log("Cleared preferences: ", JSON.stringify(preferences));
            }

            // Restore/Reload preferences and table data when user returns to the page
            function restoreSavedTableData() {
                updateTableData(djs, songs);

                const preferences = JSON.parse(localStorage.getItem("preferences"));
                if (preferences.genre.electronic || preferences.genre.lofi || preferences.genre.ambient || preferences.genre.classical) {
                    filterByGenre(djs, songs, preferences.genre);
                }

                filterByDJ(preferences.DJ);
            }
        </script>
    </body>
</html>