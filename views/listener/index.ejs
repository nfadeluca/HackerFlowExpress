<!doctype html>
<html lang="en">
    <head>
        <link href="/css/group9.css" rel="stylesheet" type="text/css">
        <link href="/css/listener.css" rel="stylesheet" type="text/css">
    </head>
    <body>
        <!----- App Title ----->
        <%- include('../partials/title.ejs') %>

        <!----- Navigation ----->
        <div class="navbar">
            <button type="button" onclick="alert('Already logged in!')">Listener</button>                
            <button type="button"> <a href="/producer">Producer</a></button>
            <button type="button"> <a href="/dj">DJ</a></button>
            <button type="button" onclick="logout()"> <a href="/">Logout</a></button>
        </div>

        <div class="listener-body-wrapper">
            <!----- Welcome message ----->
            <h1 id="listener-name" style="margin: 20px;"></h1>
            <button class="change-name">Change Name</button>

            <!----- Beginning of page body (contains boxes: Preferences and Songs) ----->
            <div class="listener-sub-body-wrapper">
                <!----- PREFERENCES (LEFT BOX) ----->
                <div class="listener-preference-body">
                    <!-- Search -->  
                    <h3>Search a Song:</h3>
                    <div class="listener-search">
                        <!-- No name by default -->
                        <form name="song-form" onsubmit="return validateForm(event)">
                            <label>Song:</label>
                            <input id="search-song" name="search-song" type="text" class="search-input">
                            <input id="search" type="submit" value="Search">
                        </form>
                    </div>   
                    <div class="error-message-container">
                        <p id="error-message" class="error-message"></p>
                    </div>
                    <!-- Genre -->            
                    <h3 style="margin-top: 0;">Select your Genre:</h3>
                    <div class="listener-genre">  
                        <!-- All by default -->                       
                        <button class="genre-button1" type="button">Electronic</button>
                        <button class="genre-button2" type="button">Lo-Fi</button>
                        <button class="genre-button3" type="button">Ambient</button>
                        <button class="genre-button4" type="button">Classical</button>
                    </div>
                
                    <!-- DJ -->  
                    <h3> Select your DJ:</h3>
                    <div class="listener-dj">
                        <select id="DJ" name="DJ">
                            <option value="AllDJ">All DJ</option>
                            <% djs.forEach((dj) => { %>
                                <option value="<%= dj.name %>"><%= dj.name %></option>
                            <% }); %>
                        </select>
                    </div>

                    <button type="button" onclick="clearSearch()">Clear</button>  

                </div>

                <!----- DISPLAY SONGS (RIGHT BOX) ----->
                <div class="listener-song-body">
                    <div class="listener-song-checkbox">
                        <h2>Upcoming Songs</h2>
                    </div>

                    <!-- Songs Table -->
                    <div class="table-section">
                        <table id="songs-table">
                            <tr>
                                <th style="width: 35%;">DJ</th>
                                <th style="width: 65%;">Songs</th>
                            </tr>
                            <% djs.filter(dj => dj.songs.length > 0).forEach((dj) => { %>
                                <% dj.songs.forEach((songID) => {
                                    const song = songs.find(s => s.songID === songID);
                                    // console.log("Song in EJS:", song) // doesn't work
                                    if (song) { %>
                                        <tr class="dj-row dj-<%= dj.name %>" onclick="onClickSong(<%= JSON.stringify(song) %>)">
                                            <td>
                                                <img width="25" height="25" src="https://img.icons8.com/ultraviolet/40/test-account.png" alt="test-account" style="padding-right: 10px;" />
                                                <%= dj.name %>
                                            </td>
                                            <td>
                                                <%= song.title %>
                                            </td>
                                        </tr>
                                    <% }
                                }); %>
                            <% }); %>
                        </table>
                    </div>


                </div>
            </div>

            <!-- SONG PLAYBAR -->

            <div class="playbar">                
                <div class="likes-box">
                    <img id="likeButton" src="/assets/not-liked.png" alt="like button" 
                    style="display:none;
                        filter: invert(100%);
                        height:40%;
                        margin:0px;
                        padding-bottom:10px;"/>
                    <p id="num-likes" style="display:none; margin:0px; padding:0px;">test</p>
                </div>
                <div class="current-song-box">
                    <p id="current-song-title" style="padding:0px; margin:0px; white-space: nowrap;">Select a Song from the Table to Play!</p>
                    <p id="current-song-artist" style="font-size: 15px; padding:0px; margin:0px; white-space: nowrap;"></p>
                    <input id="timeSlider" type="range" min="0" step="1" value="0" style="width: 100%;" >
                </div>
                <img id="playPauseButton" src="/assets/play-button.png"/>
                <img id="nextButton" src="/assets/next-button.png"/>
                <img id="volume-icon" src="/assets/volume-icon.png"/>
                <input id="volumeSlider" type="range" min="0" max="1" step="0.01" value=".5" >
                <img id="queue-icon" src="/assets/add-to-queue.png" alt="queue icon" />
                <img id="repeatButton" src="/assets/repeat.png" alt="loop"/>
            </div>

            <!-- Popup for Queue -->
            <div id="queuePopup" class="popup">
                <div class="popup-content">
                    <span class="close">&times;</span>
                    <table id="songQueueTable">
                        <!-- Queue table created at runtime -->
                    </table>
                </div>
            </div>

        </div>

        <!----- SCRIPTS ----->
        <script src="/js/login.js"></script>
        <script src="/js/listener.js"></script>
        <script src="/socket.io/socket.io.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script>
            // Declare Table Data passed by EJS Template
            var djs = <%- JSON.stringify(djs) %>;
            var songs = <%- JSON.stringify(songs) %>;

            // Connect to the Socket.io server
            const socket = io();

            // Listen for the update event from the server
            socket.on('databaseUpdate', async () => {
                // Reload data from the server when the update event is received
                try {
                    console.log("Client has detected a change! Attempting to update...");
                    const response1 = await axios.get('http://localhost:3000/api/djs');
                    const djs_data = response1.data;
                    const response2 = await axios.get('http://localhost:3000/api/songs');
                    const songs_data = response2.data;

                    // Update the table with the new data
                    updateTableData(djs_data, songs_data);
                } catch (error) {
                    console.error('Error reloading data:', error);
                }
            });

            const buttons = document.querySelectorAll("[class^='genre-button']");
            // Event Listener: change preference according to button color and index,
            // then update table accordingly
            buttons.forEach(function(button, index) {
            button.addEventListener("click", function() {
                const preferences = JSON.parse(localStorage.getItem("preferences"));
                
                let selected = false

                // Toggle the genre preference
                switch (index) {
                    case 0:
                        selected = !preferences.genre.electronic
                        preferences.genre.electronic = selected
                        break;
                    case 1:
                    selected = !preferences.genre.lofi
                        preferences.genre.lofi = selected
                        break;
                    case 2:
                        selected = !preferences.genre.ambient
                        preferences.genre.ambient = selected
                        break;
                    case 3:
                        selected = !preferences.genre.classical
                        preferences.genre.classical = selected
                        break;
                    default:
                        break;
                }

                // Update the button color based on the genre preference
                button.style.backgroundColor = selected ? "grey" : "#1a1a1a";
                
                localStorage.setItem("preferences", JSON.stringify(preferences));
                console.log("Selected Genre Preferences: ", preferences.genre);

                // Update table data based on genre preferences
                if (preferences.genre.electronic || preferences.genre.lofi || preferences.genre.ambient || preferences.genre.classical) {
                    filteredSongs = filterByGenre(songs, preferences.genre);
                    updateTableData(djs, filteredSongs);
                } else {
                    // Restore full table with original data
                    updateTableData(djs, songs);
                }
                
                // Filter table by DJ preference
                filterByDJ(preferences.DJ);
                
            });
        });

            // Clear preferences and update table
            function clearSearch() {
                document.getElementById("search-song"). value = "";
                const errorMessage = document.getElementById("error-message");
                errorMessage.textContent = "";
                
                // Clear Preferences
                const preferences = JSON.parse(localStorage.getItem("preferences"));
                Object.keys(preferences.genre).forEach( (genre) => {
                    preferences.genre[genre] = false;
                });
                buttons.forEach( (button) => {
                    button.style.backgroundColor = "#1a1a1a";
                });
                preferences.DJ = "AllDJ";
                djSelector.selectedIndex =

                localStorage.setItem("preferences", JSON.stringify(preferences));

                // Restore Table
                updateTableData(djs, songs);

                console.log("Cleared preferences: ", JSON.stringify(preferences));
            }

            // Restore/Reload preferences and table data when user returns to the page
            function restoreSavedTableData() {

                const preferences = JSON.parse(localStorage.getItem("preferences"));
                if (preferences.genre.electronic || preferences.genre.lofi || preferences.genre.ambient || preferences.genre.classical) {
                    filteredSongs = filterByGenre(songs, preferences.genre);
                    updateTableData(djs, filteredSongs)
                }

                filterByDJ(preferences.DJ);
            }

            // Update playbar UI based on currentSong in local storage
            function setCurrentSong() {
            song = JSON.parse(localStorage.getItem("currentSong"))

            if(song) {
                currentSongTitle = document.getElementById("current-song-title")
                currentSongArtist = document.getElementById("current-song-artist")
                likeButton = document.getElementById("likeButton")
                numLikes = document.getElementById("num-likes")
                
                // Display song and artist
                currentSongTitle.textContent = `${song.title}`
                currentSongTitle.style.fontWeight = "bold"
                currentSongArtist.textContent = `${song.artist}`
                currentSongArtist.style.fontStyle = "italic"
                
                console.log(song)
                // Display likes
                if (likeButton.style.display == "none") {
                    console.log("Likes have appeared!")
                    likeButton.style.display = "inline-block"
                    numLikes.style.display = "inline-block"
                } 
                numLikes.textContent = `${song.likes}`

            }  else {
                console.error("setCurrentSong error: currentSong null")
            }
        }

        // function test(song) {
        //     console.log("Test song: ", song)
        //     console.log("Type: ", typeof(song))
        //     const stringified = JSON.stringify(song)
        //     //const parsed = JSON.parse(song)
        //     console.log("Test stringified: ", stringified)
        //     console.log("Type: ", typeof(stringified))
        // }
        </script>
    </body>
</html>